name: CI/CD Workflow

on:
  push:
    branches:
      - master

env:
  REPOSITORY_PATH: 'hutinskit'
  IMAGE_NAME: 'python-test-app'
  TAG: '1.0.136'
  ARGO_TEST_BRANCH: 'tino-test'
  ARGO_PROD_BRANCH: 'tino-prod'

jobs:
  check-image:
    runs-on: ubuntu-22.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.HARBOR_CREDENTIALS_USR }}
          password: ${{ secrets.HARBOR_CREDENTIALS_PSW }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - 
        name: Check Docker Image for ${{ env.IMAGE_NAME }} and push it if doesn't exists
        id: python-step
        run: |

          # Check if the image exists
          if docker pull  ${{ env.REPOSITORY_PATH }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}; then
            echo "Python image already exists, skipping new build and push"
          else
          # Perform additional steps if the image does not exist
            echo "python_output=true" >> $GITHUB_OUTPUT         
          fi
          cat $GITHUB_OUTPUT
    outputs:
      python_output: ${{ steps.python-step.outputs.python_output }}      

  build_image:
    needs: check-image
    if: ${{ needs.check-image.outputs.python_output == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # -
      #   name: Checkout
      #   uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.HARBOR_CREDENTIALS_USR }}
          password: ${{ secrets.HARBOR_CREDENTIALS_PSW }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - 
        name: Check where am i 
        id: check-position
        run: |

          # Check if the image exists
          pwd
          ls -laht
      -
        name: Build and push python
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
    outputs:
      result: ${{ job.status }}

  # deploy_k8s:
  #   runs-on: ubuntu-latest
  #   needs: test_image
  #   strategy:
  #     matrix:
  #       deploy_env: ['test', 'prod']
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Deploy to Kubernetes
  #     if: success('test_image')
  #     run: |
  #       apk update && apk add git && apk add kustomize

  #       if [ "${{ matrix.deploy_env }}" == "test" ]; then
  #         branch="${{ env.ARGO_TEST_BRANCH }}"
  #         environment="test Kubernetes"
  #       elif [ "${{ matrix.deploy_env }}" == "prod" ]; then
  #         branch="${{ env.ARGO_PROD_BRANCH }}"
  #         environment="production Kubernetes"
  #       fi

  #       if grep -q true "check_image_creation.txt"; then
  #         echo "Deploying to $environment..."
  #         git clone https://${{ secrets.ARGO_CREDENTIALS_USR }}:${{ secrets.ARGO_CREDENTIALS_PSW }}@github.com/${{ secrets.ARGO_CREDENTIALS_USR }}/argo-k8s-python.git
  #         git config --global user.email 'tino.hutinski@gmail.com'
  #         cd argo-k8s-python
  #         git checkout $branch
  #         cd k8s-apps-deployment/python-test/
  #         kustomize edit set image ${{ env.REPOSITORY_PATH }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
  #         git commit -am "Publish image ${{ env.IMAGE_NAME }}:${{ env.TAG }}"
  #         git push
  #       fi
